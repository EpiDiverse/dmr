// custom.config
// usage: nextflow run epidiverse/dmr [OPTIONS] -c /path/to/custom.config
//
// use this file to configure jobs on your own grid machine
// conda/docker/singularity is required for pipeline dependencies
//
// refer here to determine executor support
// https://www.nextflow.io/docs/latest/executor.html
//
// example with PBSPRO:
//

conda.cacheDir = "/path/to/shared/environments"
singularity.cacheDir = "/path/to/shared/containers"
singularity.enabled = false
docker.enabled = false


executor {

	$pbspro {
		jobName = { "${task.name}".replaceAll("\\s","") }
		submitRateLimit = '20 min'
		queueSize = 20
		pollInterval = '30 sec'
	}
}


process {

	executor = 'pbspro'

	// with conda
	module = ['Miniconda3']
	conda = "${baseDir}/env/environment.yml"

	// with docker/singularity
	container = "epidiverse/dmr"


	// top-level configuration groups
	withLabel: "mid" {
    	time = { 20.h * task.attempt }
    	memory = { 8.GB * task.attempt }
    	cpus = 2
	}

	withLabel: "low" {
    	time = { 8.h * task.attempt }
    	memory = { 2.GB * task.attempt }
    	cpus = 2
	}

	// label processes which should kill the pipeline if they fail
	withLabel: "finish" {
		errorStrategy = { sleep(Math.pow(2, task.attempt) * 100 as long); (task.attempt == process.maxRetries ? 'finish' : 'retry') }
		maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 2 }
	}

	// label processes which can be safely ignored if they fail
	withLabel: "ignore" {
		errorStrategy = { sleep(Math.pow(2, task.attempt) * 100 as long); (task.attempt == process.maxRetries ? 'ignore' : 'retry') }
		maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 2 }
	}


	// configuration for preprocessing
	withName: "preprocessing" {

		// label 'low'
    	//time = { 8.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = 2

		// label 'finish'
		//errorStrategy = { sleep(Math.pow(2, task.attempt) * 100 as long); (task.attempt == process.maxRetries ? 'finish' : 'retry') }
		//maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 2 }
	}

	// configuration for preprocessing
	withName: "bedtools_unionbedg" {

		// label 'low'
    	//time = { 8.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = 2

		// label 'finish'
		//errorStrategy = { sleep(Math.pow(2, task.attempt) * 100 as long); (task.attempt == process.maxRetries ? 'finish' : 'retry') }
		//maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 2 }
	}

	// configuration for running metilene
	withName: "metilene" {

		// label 'mid'
    	time = { 1.d * task.attempt }
    	memory = { 8.GB * task.attempt }
    	cpus = { 4 * task.attempt }

		// label 'finish'
		//errorStrategy = { sleep(Math.pow(2, task.attempt) * 100 as long); (task.attempt == process.maxRetries ? 'finish' : 'retry') }
		//maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 2 }
	}

	// configuration for visualisation of distributions
	withName: "distributions" {

		// label 'mid'		
    	//time = { 20.h * task.attempt }
    	//memory = { 8.GB * task.attempt }
    	//cpus = 2

		// label 'ignore'
		//errorStrategy = { sleep(Math.pow(2, task.attempt) * 100 as long); (task.attempt == process.maxRetries ? 'ignore' : 'retry') }
		//maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 2 }
	}

	// configuration for visualisation of heatmaps
	withName: "heatmaps" {

		// label 'mid'
    	//time = { 20.h * task.attempt }
    	//memory = { 8.GB * task.attempt }
    	//cpus = 2

		// label 'ignore'
		//errorStrategy = { sleep(Math.pow(2, task.attempt) * 100 as long); (task.attempt == process.maxRetries ? 'ignore' : 'retry') }
		//maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 2 }
	}

}


